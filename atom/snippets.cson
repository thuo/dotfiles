# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.js.jsx':
  'React Component':
    'prefix': 'rc'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';

      export default class ${1} extends Component {
        render() {
          return (
            ${2:<div>Hello world!</div>}
          );
        }
      }

      ${1}.propTypes = {
      };

    """

  'React functional component':
    'prefix': 'rcf'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';

      export default function ${1}(props) {
        return (
          ${2:<div>Hello world!</div>}
        );
      }

      ${1}.propTypes = {
      };
    """

  'React Component constructor':
    'prefix': 'rconst'
    'body': """
      constructor(props) {
        super(props);
        ${1}
      }

    """

  'React componentDidMount':
    'prefix': 'rcdm'
    'body': """
      componentDidMount() {
        ${1}
      }

    """

  'React bind method to this':
    'prefix': 'rbm',
    'body': """
      this.${1} = this.${1}.bind(this);
    """

  'React propTypes':
    'prefix': 'rp',
    'body': """
      ${1}.propTypes = {
        ${2}
      };
    """

  'React PropType':
    'prefix': 'rpt',
    'body': "${1:prop}: PropTypes.${2:type},"

  'React PropType required':
    'prefix': 'rptr',
    'body': "${1:prop}: PropTypes.${2:type}.isRequired,"

  'React PropType shape':
    'prefix': 'rps',
    'body': """
      ${1:prop}: PropTypes.shape({
        ${2}
      }),
    """

  'React PropType shape required':
    'prefix': 'rpsr',
    'body': """
      ${1:prop}: PropTypes.shape({
        ${2}
      }).isRequired,
    """

  'React Router <Route />':
    'prefix': 'rrt'
    'body': "<Route path='${1}' component={${2}} />"

  'React Router <Route /> import':
    'prefix': 'rrti'
    'body': "import { Route } from 'react-router';"

  'React Router <Link />':
    'prefix': 'rrl'
    'body': "<Link to={${1}}>${2}</Link>"

  'React Router <Link /> import':
    'prefix': 'rrti'
    'body': "import { Link } from 'react-router';"

  'React redux connected Component':
    'prefix': 'rdcc'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      import { connect } from 'react-redux';

      class ${1} extends Component {
        render() {
          return (
            ${2:<div>Hello world!</div>}
          );
        }
      }

      ${1}.propTypes = {
      };

      function mapStateToProps(state) {
        return {
          ${3}
        }
      }

      export default connect(mapStateToProps, {${4}})(${1});
    """

  'React redux connected function Component':
    'prefix': 'rdccf'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';
      import { connect } from 'react-redux';

      function ${1}(props) {
        return (
          ${2:<div>Hello world!</div>}
        );
      }

      ${1}.propTypes = {
      };

      function mapStateToProps(state) {
        return {
          ${3}
        }
      }

      export default connect(mapStateToProps, {${4}})(${1});
    """
